!SLIDE center subsection

# Introduction to Tensorflow and Theano

!SLIDE

# Stuff that both of them have

* Both provide a Python API to operations over NDArrays(Tensors)
* Both allow building a graph of operations and executing that graph in C++
* Both are pretty low level, not C++ but flexible and complex enough to do interesting things.

!SLIDE

# Tensorflow

* Developed by Google Brain Research team
* Written in Python C++
* Python API
  * C++ core

!SLIDE

# Tensorflow Core

* dataflow graph representing computations
* The entire dataflow graph is a complete description of computations, which occur within a session, and are executed on devices (CPUs or GPUs)
  * Nodes represent operations
  * edges represent tensors (multi-dimensional arrays, the backbone of TensorFlow)



!SLIDE

# Linear Regression example


<pre>
import numpy as np
import tensorflow as tf

# Model parameters
W = tf.Variable([.3], tf.float32)
b = tf.Variable([-.3], tf.float32)
# Model input and output
x = tf.placeholder(tf.float32)
linear_model = W * x + b
y = tf.placeholder(tf.float32)
# loss
loss = tf.reduce_sum(tf.square(linear_model - y)) # sum of the squares
# optimizer
optimizer = tf.train.GradientDescentOptimizer(0.01)
train = optimizer.minimize(loss)
# training data
x_train = [1,2,3,4]
y_train = [0,-1,-2,-3]
# training loop
init = tf.global_variables_initializer()
sess = tf.Session()
sess.run(init) # reset values to wrong
for i in range(1000):
  sess.run(train, {x:x_train, y:y_train})

# evaluate training accuracy
curr_W, curr_b, curr_loss  = sess.run([W, b, loss], {x:x_train, y:y_train})
print("W: %s b: %s loss: %s"%(curr_W, curr_b, curr_loss))

</pre>

!SLIDE

# Theano

* Numerical Computation Library for Python

* Define, optimize and evaluate mathematical expressions over NDArrays


It is good to think of theano.function as the interface to a compiler which builds a callable object from a purely symbolic graph. One of Theanoâ€™s most important features is that theano.function can optimize a graph and even compile some or all of it into native machine instructions.

